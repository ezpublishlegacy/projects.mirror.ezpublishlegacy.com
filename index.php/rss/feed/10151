<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eZ Projects / ezkeyword_autocomplete / Forum</title>
    <link>http://projects.ez.no/</link>
    <description></description>
    <language>en-GB</language>
    <managingEditor>community@ez.no (Administrator User)</managingEditor>
    <pubDate>Sun, 05 Feb 2017 13:44:52 +0000</pubDate>
    <lastBuildDate>Sun, 05 Feb 2017 13:44:52 +0000</lastBuildDate>
    <generator>eZ Components Feed dev (http://ezcomponents.org/docs/tutorials/Feed)</generator>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <atom:link href="http://projects.ez.no/rss/feed/10151" rel="self" type="application/rss+xml"/>
    <item>
      <title>Re: 4.3 calendar incompatibility </title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility4</link>
      <description>Hello Clément, &#13;
&#13;
I would love to ! &#13;
Just apply for membership here http://projects.ez.no/ezkeyword_autocomplete/team/members , this will give you commit right to the project's SVN repository.&#13;
&#13;
Looking forward to seeing you contribute !&#13;
-- &#13;
Nicolas</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility4</guid>
      <pubDate>Sun, 06 Feb 2011 11:36:00 +0000</pubDate>
    </item>
    <item>
      <title>Re: 4.3 calendar incompatibility </title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility3</link>
      <description>Hi Nicolas,&#13;
&#13;
We are still on a 4.3 (we' will switch to 4.4 or directly to 4.5, but an other day).&#13;
the incompatibilities we had were due to another home made extension.&#13;
I've managed to solve it by upgrading the ezkeyword_autocomplete JS from yui 2.5 to 2.8.2r1. it seems to work correctly. Do you want my new version ?</description>
      <author>community@ez.no (Clément Matéo)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility3</guid>
      <pubDate>Fri, 04 Feb 2011 14:02:48 +0000</pubDate>
    </item>
    <item>
      <title>Re: [eZ 4.4] Bug with "AutocompleteKeyword...</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword5</link>
      <description>Thanks !&#13;
&#13;
Should you be willing to give a deeper face-lift to this extension, just raise a hand and let's start together on this. It is a quite useful extension, but now dates a bit.&#13;
&#13;
Cheers,</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword5</guid>
      <pubDate>Mon, 20 Dec 2010 09:08:05 +0000</pubDate>
    </item>
    <item>
      <title>Re: [eZ 4.4] Bug with "AutocompleteKeyword...</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword4</link>
      <description>OK, thanks.&#13;
&#13;
I committed the patch.&#13;
</description>
      <author>community@ez.no (Gilles Ballini)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword4</guid>
      <pubDate>Fri, 17 Dec 2010 10:05:17 +0000</pubDate>
    </item>
    <item>
      <title>Re: [eZ 4.4] Bug with "AutocompleteKeyword...</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword3</link>
      <description>And i approved it.&#13;
Welcome aboard Gilles !</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword3</guid>
      <pubDate>Fri, 17 Dec 2010 09:58:17 +0000</pubDate>
    </item>
    <item>
      <title>Re: [eZ 4.4] Bug with "AutocompleteKeyword...</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword2</link>
      <description>Hi Nicolas,&#13;
&#13;
Thanks for your answer.&#13;
&#13;
I submitted the membership registration on the project.&#13;
&#13;
Cheers,&#13;
&#13;
--&#13;
Gilles</description>
      <author>community@ez.no (Gilles Ballini)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword2</guid>
      <pubDate>Thu, 16 Dec 2010 14:47:40 +0000</pubDate>
    </item>
    <item>
      <title>Re: 4.3 calendar incompatibility </title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility2</link>
      <description>Hi Clément, just saw your post today, sorry about this...&#13;
&#13;
Now that Fuji (4.4) was released, have you tried ezkeyword_autocomplete on it ?&#13;
&#13;
Cheers,</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility2</guid>
      <pubDate>Thu, 16 Dec 2010 08:17:52 +0000</pubDate>
    </item>
    <item>
      <title>Re: [eZ 4.4] Bug with "AutocompleteKeyword...</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword</link>
      <description>Hi Gilles, and thanks for this feedback !&#13;
&#13;
Would you like to become member of the project and push this patch in the trunk directly ? &#13;
You can do so by clicking the "Register" button there : http://projects.ez.no/ezkeyword_autocomplete/team/members&#13;
&#13;
Let me know, &#13;
Cheers,&#13;
</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass/re_ez_4_4_bug_with_autocompletekeyword</guid>
      <pubDate>Wed, 15 Dec 2010 11:42:04 +0000</pubDate>
    </item>
    <item>
      <title>[eZ 4.4] Bug with "AutocompleteKeywordsPerContentClass"</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass</link>
      <description>Hi.&#13;
In eZ 4.4 (didn't test with older version), it seems that the directive "AutocompleteKeywordsPerContentClass" doesn't work :&#13;
&#13;
Even when it is set to 'enabled', the autocomplete functionnality doesn't filter to current class.&#13;
&#13;
&#13;
I corrected the bug with the following patch :&#13;
&#13;
&lt;code&gt;&#13;
Index: design/standard/templates/content/datatype/edit/ezkeyword.tpl&#13;
===================================================================&#13;
--- design/standard/templates/content/datatype/edit/ezkeyword.tpl	(.../vendor/current)	(révision 10)&#13;
+++ design/standard/templates/content/datatype/edit/ezkeyword.tpl	(.../trunk)	(révision 10)&#13;
@@ -18,11 +18,11 @@&#13;
 &lt;/div&gt;&#13;
 &#13;
 &lt;script type="text/javascript"&gt;&#13;
-{def $max_autocomplete_results = ezini( 'eZKeywordSettings', 'MaxAutocompleteResults', 'datatype.ini',, true() )&#13;
+{def $max_autocomplete_results = ezini( 'eZKeywordSettings', 'MaxAutocompleteResults', 'datatype.ini' )&#13;
 	 $autocomplete_per_content_class = false()}&#13;
 &#13;
 &#13;
-{if eq( ezini( 'eZKeywordSettings', 'AutocompleteKeywordsPerContentClass', 'datatype.ini',, true() ), 'enabled' )}&#13;
+{if eq( ezini( 'eZKeywordSettings', 'AutocompleteKeywordsPerContentClass', 'datatype.ini'), 'enabled' )}&#13;
 	{set $autocomplete_per_content_class = true()}&#13;
 	{def $content_class_id = $attribute.object.contentclass_id}&#13;
 {else}&#13;
&lt;/code&gt;</description>
      <author>community@ez.no (Gilles Ballini)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/ez_4_4_bug_with_autocompletekeywordspercontentclass</guid>
      <pubDate>Tue, 14 Dec 2010 10:31:38 +0000</pubDate>
    </item>
    <item>
      <title>Re: 4.3 calendar incompatibility </title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility</link>
      <description>Anyone ?</description>
      <author>community@ez.no (Clément Matéo)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility/re_4_3_calendar_incompatibility</guid>
      <pubDate>Tue, 26 Oct 2010 08:52:14 +0000</pubDate>
    </item>
    <item>
      <title>4.3 calendar incompatibility </title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility</link>
      <description>Hi,&#13;
&#13;
I have installed ezkeyword autocomplete on an ezpublish 4.3. And it seems to have some incompatibilities with the calendar used by date and timedate datatype attributes. Did someone get the same ?</description>
      <author>community@ez.no (Clément Matéo)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/4_3_calendar_incompatibility</guid>
      <pubDate>Tue, 12 Oct 2010 08:14:28 +0000</pubDate>
    </item>
    <item>
      <title>Re: a question about languages</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages4</link>
      <description>Hi Mathieu, just stumbled upon your reply now. &#13;
&#13;
Having the keywords related to the current language only would actually be interesting (this could be configurable). Would you want to contribute to this extension, and push your solution here ?&#13;
(i am sure you know how it works: apply for membership, i'll be notified, approve, and then you are free to commit :) ) &#13;
&#13;
Cheers,</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages4</guid>
      <pubDate>Tue, 26 Jan 2010 08:12:27 +0000</pubDate>
    </item>
    <item>
      <title>Re: a question about languages</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages3</link>
      <description>Why don't you fetch keyword that are only related to content in the current language ?&#13;
I have done that on a home made autocomplete system and it works fine.</description>
      <author>community@ez.no (Matthieu  Sévère)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages3</guid>
      <pubDate>Tue, 08 Dec 2009 11:04:07 +0000</pubDate>
    </item>
    <item>
      <title>Re: a question about languages</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages2</link>
      <description>Here is the related issue : &#13;
http://issues.ez.no/IssueView.php?Id=12584</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages2</guid>
      <pubDate>Thu, 30 Apr 2009 15:21:35 +0000</pubDate>
    </item>
    <item>
      <title>Re: a question about languages</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages</link>
      <description>Hi Gaetano, &#13;
&#13;
This limitation is not tied to the hereby shipped extension, but to the ezkeyword datatype itself : it is not translation-aware. Hence the impossibility to retrieve keywords filtered by language. Here is the faulty table structure : &#13;
&#13;
&lt;code&gt;&#13;
mysql&gt; describe ezkeyword;&#13;
+----------+--------------+------+-----+---------+----------------+&#13;
| Field    | Type         | Null | Key | Default | Extra          |&#13;
+----------+--------------+------+-----+---------+----------------+&#13;
| class_id | int(11)      | NO   |     | 0       |                | &#13;
| id       | int(11)      | NO   | PRI | NULL    | auto_increment | &#13;
| keyword  | varchar(255) | YES  | MUL | NULL    |                | &#13;
+----------+--------------+------+-----+---------+----------------+&#13;
&lt;/code&gt;&#13;
&#13;
Thanks for the feedback on this !</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages/re_a_question_about_languages</guid>
      <pubDate>Thu, 30 Apr 2009 14:27:46 +0000</pubDate>
    </item>
    <item>
      <title>a question about languages</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages</link>
      <description>when editing a keyword in say eng-UK, will it suggest keywords that have been entered in fre-FR translations of content?</description>
      <author>community@ez.no (Gaetano Giunta)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/a_question_about_languages</guid>
      <pubDate>Thu, 30 Apr 2009 14:19:17 +0000</pubDate>
    </item>
    <item>
      <title>Re: version with prototype.js</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js4</link>
      <description>Ok, this solution looks thorough, and should be integrated eventually. &#13;
&#13;
I'm glad to welcome you aboard, please join us here : http://projects.ez.no/ezkeyword_autocomplete/team/members&#13;
&#13;
Thanks,&#13;
</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js4</guid>
      <pubDate>Wed, 06 Aug 2008 08:10:17 +0000</pubDate>
    </item>
    <item>
      <title>Re: version with prototype.js</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js3</link>
      <description>Hi, I don't  want to load several frameworks and sometime there is conflit between them (just sometime).&#13;
&#13;
for the endhandlers, your can add the OutputType in the ini&#13;
&#13;
you see, my solution is flat file, and it works for php4 beacause no json.&#13;
&#13;
you can use this, then it works for PHP4&#13;
&#13;
Finally I am glad to join with you for the project.&#13;
&lt;code&gt;&#13;
if function_exists('json_encode')&#13;
{&#13;
    include_once( 'lib/json.php' );&#13;
    function json_encode($var)&#13;
    {&#13;
        $json = new Services_JSON();&#13;
        return $json-&gt;encode($var);&#13;
    }&#13;
}&#13;
&lt;/code&gt;&#13;
and add a json librarie &#13;
&#13;
&#13;
&lt;code&gt;&#13;
 &lt;?php&#13;
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */&#13;
&#13;
/**&#13;
 * Converts to and from JSON format.&#13;
 *&#13;
 * JSON (JavaScript Object Notation) is a lightweight data-interchange&#13;
 * format. It is easy for humans to read and write. It is easy for machines&#13;
 * to parse and generate. It is based on a subset of the JavaScript&#13;
 * Programming Language, Standard ECMA-262 3rd Edition - December 1999.&#13;
 * This feature can also be found in  Python. JSON is a text format that is&#13;
 * completely language independent but uses conventions that are familiar&#13;
 * to programmers of the C-family of languages, including C, C++, C#, Java,&#13;
 * JavaScript, Perl, TCL, and many others. These properties make JSON an&#13;
 * ideal data-interchange language.&#13;
 *&#13;
 * This package provides a simple encoder and decoder for JSON notation. It&#13;
 * is intended for use with client-side Javascript applications that make&#13;
 * use of HTTPRequest to perform server communication functions - data can&#13;
 * be encoded into JSON notation for use in a client-side javascript, or&#13;
 * decoded from incoming Javascript requests. JSON format is native to&#13;
 * Javascript, and can be directly eval()'ed with no further parsing&#13;
 * overhead&#13;
 *&#13;
 * All strings should be in ASCII or UTF-8 format!&#13;
 *&#13;
 * LICENSE: Redistribution and use in source and binary forms, with or&#13;
 * without modification, are permitted provided that the following&#13;
 * conditions are met: Redistributions of source code must retain the&#13;
 * above copyright notice, this list of conditions and the following&#13;
 * disclaimer. Redistributions in binary form must reproduce the above&#13;
 * copyright notice, this list of conditions and the following disclaimer&#13;
 * in the documentation and/or other materials provided with the&#13;
 * distribution.&#13;
 *&#13;
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED&#13;
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#13;
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN&#13;
 * NO EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,&#13;
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,&#13;
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS&#13;
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&#13;
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR&#13;
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE&#13;
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH&#13;
 * DAMAGE.&#13;
 *&#13;
 * @category&#13;
 * @package     Services_JSON&#13;
 * @author      Michal Migurski &lt;mike-json@teczno.com&gt;&#13;
 * @author      Matt Knapp &lt;mdknapp[at]gmail[dot]com&gt;&#13;
 * @author      Brett Stimmerman &lt;brettstimmerman[at]gmail[dot]com&gt;&#13;
 * @copyright   2005 Michal Migurski&#13;
 * @version     CVS: $Id: JSON.php,v 1.30 2006/03/08 16:10:20 migurski Exp $&#13;
 * @license     http://www.opensource.org/licenses/bsd-license.php&#13;
 * @link        http://pear.php.net/pepr/pepr-proposal-show.php?id=198&#13;
 */&#13;
&#13;
/**&#13;
 * Marker constant for Services_JSON::decode(), used to flag stack state&#13;
 */&#13;
define('SERVICES_JSON_SLICE',   1);&#13;
&#13;
/**&#13;
 * Marker constant for Services_JSON::decode(), used to flag stack state&#13;
 */&#13;
define('SERVICES_JSON_IN_STR',  2);&#13;
&#13;
/**&#13;
 * Marker constant for Services_JSON::decode(), used to flag stack state&#13;
 */&#13;
define('SERVICES_JSON_IN_ARR',  3);&#13;
&#13;
/**&#13;
 * Marker constant for Services_JSON::decode(), used to flag stack state&#13;
 */&#13;
define('SERVICES_JSON_IN_OBJ',  4);&#13;
&#13;
/**&#13;
 * Marker constant for Services_JSON::decode(), used to flag stack state&#13;
 */&#13;
define('SERVICES_JSON_IN_CMT', 5);&#13;
&#13;
/**&#13;
 * Behavior switch for Services_JSON::decode()&#13;
 */&#13;
define('SERVICES_JSON_LOOSE_TYPE', 16);&#13;
&#13;
/**&#13;
 * Behavior switch for Services_JSON::decode()&#13;
 */&#13;
define('SERVICES_JSON_SUPPRESS_ERRORS', 32);&#13;
&#13;
/**&#13;
 * Converts to and from JSON format.&#13;
 *&#13;
 * Brief example of use:&#13;
 *&#13;
 * &lt;code&gt;&#13;
 * // create a new instance of Services_JSON&#13;
 * $json = new Services_JSON();&#13;
 *&#13;
 * // convert a complexe value to JSON notation, and send it to the browser&#13;
 * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4)));&#13;
 * $output = $json-&gt;encode($value);&#13;
 *&#13;
 * print($output);&#13;
 * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]]&#13;
 *&#13;
 * // accept incoming POST data, assumed to be in JSON notation&#13;
 * $input = file_get_contents('php://input', 1000000);&#13;
 * $value = $json-&gt;decode($input);&#13;
 * &lt;/code&gt;&#13;
 */&#13;
class Services_JSON&#13;
{&#13;
   /**&#13;
    * constructs a new JSON instance&#13;
    *&#13;
    * @param    int     $use    object behavior flags; combine with boolean-OR&#13;
    *&#13;
    *                           possible values:&#13;
    *                           - SERVICES_JSON_LOOSE_TYPE:  loose typing.&#13;
    *                                   "{...}" syntax creates associative arrays&#13;
    *                                   instead of objects in decode().&#13;
    *                           - SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.&#13;
    *                                   Values which can't be encoded (e.g. resources)&#13;
    *                                   appear as NULL instead of throwing errors.&#13;
    *                                   By default, a deeply-nested resource will&#13;
    *                                   bubble up with an error, so all return values&#13;
    *                                   from encode() should be checked with isError()&#13;
    */&#13;
    function Services_JSON($use = 0)&#13;
    {&#13;
        $this-&gt;use = $use;&#13;
    }&#13;
&#13;
   /**&#13;
    * convert a string from one UTF-16 char to one UTF-8 char&#13;
    *&#13;
    * Normally should be handled by mb_convert_encoding, but&#13;
    * provides a slower PHP-only method for installations&#13;
    * that lack the multibye string extension.&#13;
    *&#13;
    * @param    string  $utf16  UTF-16 character&#13;
    * @return   string  UTF-8 character&#13;
    * @access   private&#13;
    */&#13;
    function utf162utf8($utf16)&#13;
    {&#13;
        // oh please oh please oh please oh please oh please&#13;
        if(function_exists('mb_convert_encoding')) {&#13;
            return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');&#13;
        }&#13;
&#13;
        $bytes = (ord($utf16{0}) &lt;&lt; 8) | ord($utf16{1});&#13;
&#13;
        switch(true) {&#13;
            case ((0x7F & $bytes) == $bytes):
                // this case should never be reached, because we are in ASCII range
                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                return chr(0x7F & $bytes);&#13;
&#13;
            case (0x07FF & $bytes) == $bytes:
                // return a 2-byte UTF-8 character
                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                return chr(0xC0 | (($bytes >> 6) & 0x1F))
                     . chr(0x80 | ($bytes & 0x3F));&#13;
&#13;
            case (0xFFFF & $bytes) == $bytes:
                // return a 3-byte UTF-8 character
                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                return chr(0xE0 | (($bytes >> 12) & 0x0F))
                     . chr(0x80 | (($bytes >> 6) & 0x3F))
                     . chr(0x80 | ($bytes & 0x3F));&#13;
        }&#13;
&#13;
        // ignoring UTF-32 for now, sorry&#13;
        return '';&#13;
    }&#13;
&#13;
   /**&#13;
    * convert a string from one UTF-8 char to one UTF-16 char&#13;
    *&#13;
    * Normally should be handled by mb_convert_encoding, but&#13;
    * provides a slower PHP-only method for installations&#13;
    * that lack the multibye string extension.&#13;
    *&#13;
    * @param    string  $utf8   UTF-8 character&#13;
    * @return   string  UTF-16 character&#13;
    * @access   private&#13;
    */&#13;
    function utf82utf16($utf8)&#13;
    {&#13;
        // oh please oh please oh please oh please oh please&#13;
        if(function_exists('mb_convert_encoding')) {&#13;
            return mb_convert_encoding($utf8, 'UTF-16', 'UTF-8');&#13;
        }&#13;
&#13;
        switch(strlen($utf8)) {&#13;
            case 1:&#13;
                // this case should never be reached, because we are in ASCII range&#13;
                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8&#13;
                return $utf8;&#13;
&#13;
            case 2:&#13;
                // return a UTF-16 character from a 2-byte UTF-8 char&#13;
                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8&#13;
                return chr(0x07 & (ord($utf8{0}) >> 2))
                     . chr((0xC0 & (ord($utf8{0}) << 6))
                         | (0x3F & ord($utf8{1})));&#13;
&#13;
            case 3:&#13;
                // return a UTF-16 character from a 3-byte UTF-8 char&#13;
                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8&#13;
                return chr((0xF0 & (ord($utf8{0}) << 4))
                         | (0x0F & (ord($utf8{1}) >> 2)))
                     . chr((0xC0 & (ord($utf8{1}) << 6))
                         | (0x7F & ord($utf8{2})));&#13;
        }&#13;
&#13;
        // ignoring UTF-32 for now, sorry&#13;
        return '';&#13;
    }&#13;
&#13;
   /**&#13;
    * encodes an arbitrary variable into JSON format&#13;
    *&#13;
    * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.&#13;
    *                           see argument 1 to Services_JSON() above for array-parsing behavior.&#13;
    *                           if var is a strng, note that encode() always expects it&#13;
    *                           to be in ASCII or UTF-8 format!&#13;
    *&#13;
    * @return   mixed   JSON string representation of input var or an error if a problem occurs&#13;
    * @access   public&#13;
    */&#13;
    function encode($var)&#13;
    {&#13;
        switch (gettype($var)) {&#13;
            case 'boolean':&#13;
                return $var ? 'true' : 'false';&#13;
&#13;
            case 'NULL':&#13;
                return 'null';&#13;
&#13;
            case 'integer':&#13;
                return (int) $var;&#13;
&#13;
            case 'double':&#13;
            case 'float':&#13;
                return (float) $var;&#13;
&#13;
            case 'string':&#13;
                // STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT&#13;
                $ascii = '';&#13;
                $strlen_var = strlen($var);&#13;
&#13;
               /*&#13;
                * Iterate over every character in the string,&#13;
                * escaping with a slash or encoding to UTF-8 where necessary&#13;
                */&#13;
                for ($c = 0; $c &lt; $strlen_var; ++$c) {&#13;
&#13;
                    $ord_var_c = ord($var{$c});&#13;
&#13;
                    switch (true) {&#13;
                        case $ord_var_c == 0x08:&#13;
                            $ascii .= '\b';&#13;
                            break;&#13;
                        case $ord_var_c == 0x09:&#13;
                            $ascii .= '\t';&#13;
                            break;&#13;
                        case $ord_var_c == 0x0A:&#13;
                            $ascii .= '\n';&#13;
                            break;&#13;
                        case $ord_var_c == 0x0C:&#13;
                            $ascii .= '\f';&#13;
                            break;&#13;
                        case $ord_var_c == 0x0D:&#13;
                            $ascii .= '\r';&#13;
                            break;&#13;
&#13;
                        case $ord_var_c == 0x22:&#13;
                        case $ord_var_c == 0x2F:&#13;
                        case $ord_var_c == 0x5C:&#13;
                            // double quote, slash, slosh&#13;
                            $ascii .= '\\'.$var{$c};&#13;
                            break;&#13;
&#13;
                        case (($ord_var_c &gt;= 0x20) & ($ord_var_c <= 0x7F)):
                            // characters U-00000000 - U-0000007F (same as ASCII)
                            $ascii .= $var{$c};&#13;
                            break;&#13;
&#13;
                        case (($ord_var_c & 0xE0) == 0xC0):
                            // characters U-00000080 - U-000007FF, mask 110XXXXX
                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                            $char = pack('C*', $ord_var_c, ord($var{$c + 1}));&#13;
                            $c += 1;&#13;
                            $utf16 = $this-&gt;utf82utf16($char);&#13;
                            $ascii .= sprintf('\u%04s', bin2hex($utf16));&#13;
                            break;&#13;
&#13;
                        case (($ord_var_c & 0xF0) == 0xE0):
                            // characters U-00000800 - U-0000FFFF, mask 1110XXXX
                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                            $char = pack('C*', $ord_var_c,
                                         ord($var{$c + 1}),
                                         ord($var{$c + 2}));&#13;
                            $c += 2;&#13;
                            $utf16 = $this-&gt;utf82utf16($char);&#13;
                            $ascii .= sprintf('\u%04s', bin2hex($utf16));&#13;
                            break;&#13;
&#13;
                        case (($ord_var_c & 0xF8) == 0xF0):
                            // characters U-00010000 - U-001FFFFF, mask 11110XXX
                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                            $char = pack('C*', $ord_var_c,
                                         ord($var{$c + 1}),
                                         ord($var{$c + 2}),
                                         ord($var{$c + 3}));&#13;
                            $c += 3;&#13;
                            $utf16 = $this-&gt;utf82utf16($char);&#13;
                            $ascii .= sprintf('\u%04s', bin2hex($utf16));&#13;
                            break;&#13;
&#13;
                        case (($ord_var_c & 0xFC) == 0xF8):
                            // characters U-00200000 - U-03FFFFFF, mask 111110XX
                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                            $char = pack('C*', $ord_var_c,
                                         ord($var{$c + 1}),
                                         ord($var{$c + 2}),
                                         ord($var{$c + 3}),
                                         ord($var{$c + 4}));&#13;
                            $c += 4;&#13;
                            $utf16 = $this-&gt;utf82utf16($char);&#13;
                            $ascii .= sprintf('\u%04s', bin2hex($utf16));&#13;
                            break;&#13;
&#13;
                        case (($ord_var_c & 0xFE) == 0xFC):
                            // characters U-04000000 - U-7FFFFFFF, mask 1111110X
                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                            $char = pack('C*', $ord_var_c,
                                         ord($var{$c + 1}),
                                         ord($var{$c + 2}),
                                         ord($var{$c + 3}),
                                         ord($var{$c + 4}),
                                         ord($var{$c + 5}));&#13;
                            $c += 5;&#13;
                            $utf16 = $this-&gt;utf82utf16($char);&#13;
                            $ascii .= sprintf('\u%04s', bin2hex($utf16));&#13;
                            break;&#13;
                    }&#13;
                }&#13;
&#13;
                return '"'.$ascii.'"';&#13;
&#13;
            case 'array':&#13;
               /*&#13;
                * As per JSON spec if any array key is not an integer&#13;
                * we must treat the the whole array as an object. We&#13;
                * also try to catch a sparsely populated associative&#13;
                * array with numeric keys here because some JS engines&#13;
                * will create an array with empty indexes up to&#13;
                * max_index which can cause memory issues and because&#13;
                * the keys, which may be relevant, will be remapped&#13;
                * otherwise.&#13;
                *&#13;
                * As per the ECMA and JSON specification an object may&#13;
                * have any string as a property. Unfortunately due to&#13;
                * a hole in the ECMA specification if the key is a&#13;
                * ECMA reserved word or starts with a digit the&#13;
                * parameter is only accessible using ECMAScript's&#13;
                * bracket notation.&#13;
                */&#13;
&#13;
                // treat as a JSON object&#13;
                if (is_array($var) & count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) {
                    $properties = array_map(array($this, 'name_value'),
                                            array_keys($var),
                                            array_values($var));&#13;
&#13;
                    foreach($properties as $property) {&#13;
                        if(Services_JSON::isError($property)) {&#13;
                            return $property;&#13;
                        }&#13;
                    }&#13;
&#13;
                    return '{' . join(',', $properties) . '}';&#13;
                }&#13;
&#13;
                // treat it like a regular array&#13;
                $elements = array_map(array($this, 'encode'), $var);&#13;
&#13;
                foreach($elements as $element) {&#13;
                    if(Services_JSON::isError($element)) {&#13;
                        return $element;&#13;
                    }&#13;
                }&#13;
&#13;
                return '[' . join(',', $elements) . ']';&#13;
&#13;
            case 'object':&#13;
                $vars = get_object_vars($var);&#13;
&#13;
                $properties = array_map(array($this, 'name_value'),&#13;
                                        array_keys($vars),&#13;
                                        array_values($vars));&#13;
&#13;
                foreach($properties as $property) {&#13;
                    if(Services_JSON::isError($property)) {&#13;
                        return $property;&#13;
                    }&#13;
                }&#13;
&#13;
                return '{' . join(',', $properties) . '}';&#13;
&#13;
            default:&#13;
                return ($this-&gt;use & SERVICES_JSON_SUPPRESS_ERRORS)
                    ? 'null'
                    : new Services_JSON_Error(gettype($var)." can not be encoded as JSON string");&#13;
        }&#13;
    }&#13;
&#13;
   /**&#13;
    * array-walking function for use in generating JSON-formatted name-value pairs&#13;
    *&#13;
    * @param    string  $name   name of key to use&#13;
    * @param    mixed   $value  reference to an array element to be encoded&#13;
    *&#13;
    * @return   string  JSON-formatted name-value pair, like '"name":value'&#13;
    * @access   private&#13;
    */&#13;
    function name_value($name, $value)&#13;
    {&#13;
        $encoded_value = $this-&gt;encode($value);&#13;
&#13;
        if(Services_JSON::isError($encoded_value)) {&#13;
            return $encoded_value;&#13;
        }&#13;
&#13;
        return $this-&gt;encode(strval($name)) . ':' . $encoded_value;&#13;
    }&#13;
&#13;
   /**&#13;
    * reduce a string by removing leading and trailing comments and whitespace&#13;
    *&#13;
    * @param    $str    string      string value to strip of comments and whitespace&#13;
    *&#13;
    * @return   string  string value stripped of comments and whitespace&#13;
    * @access   private&#13;
    */&#13;
    function reduce_string($str)&#13;
    {&#13;
        $str = preg_replace(array(&#13;
&#13;
                // eliminate single line comments in '// ...' form&#13;
                '#^\s*//(.+)$#m',&#13;
&#13;
                // eliminate multi-line comments in '/* ... */' form, at start of string&#13;
                '#^\s*/\*(.+)\*/#Us',&#13;
&#13;
                // eliminate multi-line comments in '/* ... */' form, at end of string&#13;
                '#/\*(.+)\*/\s*$#Us'&#13;
&#13;
            ), '', $str);&#13;
&#13;
        // eliminate extraneous space&#13;
        return trim($str);&#13;
    }&#13;
&#13;
   /**&#13;
    * decodes a JSON string into appropriate variable&#13;
    *&#13;
    * @param    string  $str    JSON-formatted string&#13;
    *&#13;
    * @return   mixed   number, boolean, string, array, or object&#13;
    *                   corresponding to given JSON input string.&#13;
    *                   See argument 1 to Services_JSON() above for object-output behavior.&#13;
    *                   Note that decode() always returns strings&#13;
    *                   in ASCII or UTF-8 format!&#13;
    * @access   public&#13;
    */&#13;
    function decode($str)&#13;
    {&#13;
        $str = $this-&gt;reduce_string($str);&#13;
&#13;
        switch (strtolower($str)) {&#13;
            case 'true':&#13;
                return true;&#13;
&#13;
            case 'false':&#13;
                return false;&#13;
&#13;
            case 'null':&#13;
                return null;&#13;
&#13;
            default:&#13;
                $m = array();&#13;
&#13;
                if (is_numeric($str)) {&#13;
                    // Lookie-loo, it's a number&#13;
&#13;
                    // This would work on its own, but I'm trying to be&#13;
                    // good about returning integers where appropriate:&#13;
                    // return (float)$str;&#13;
&#13;
                    // Return float or int, as appropriate&#13;
                    return ((float)$str == (integer)$str)&#13;
                        ? (integer)$str&#13;
                        : (float)$str;&#13;
&#13;
                } elseif (preg_match('/^("|\').*(\1)$/s', $str, $m) & $m[1] == $m[2]) {
                    // STRINGS RETURNED IN UTF-8 FORMAT
                    $delim = substr($str, 0, 1);&#13;
                    $chrs = substr($str, 1, -1);&#13;
                    $utf8 = '';&#13;
                    $strlen_chrs = strlen($chrs);&#13;
&#13;
                    for ($c = 0; $c &lt; $strlen_chrs; ++$c) {&#13;
&#13;
                        $substr_chrs_c_2 = substr($chrs, $c, 2);&#13;
                        $ord_chrs_c = ord($chrs{$c});&#13;
&#13;
                        switch (true) {&#13;
                            case $substr_chrs_c_2 == '\b':&#13;
                                $utf8 .= chr(0x08);&#13;
                                ++$c;&#13;
                                break;&#13;
                            case $substr_chrs_c_2 == '\t':&#13;
                                $utf8 .= chr(0x09);&#13;
                                ++$c;&#13;
                                break;&#13;
                            case $substr_chrs_c_2 == '\n':&#13;
                                $utf8 .= chr(0x0A);&#13;
                                ++$c;&#13;
                                break;&#13;
                            case $substr_chrs_c_2 == '\f':&#13;
                                $utf8 .= chr(0x0C);&#13;
                                ++$c;&#13;
                                break;&#13;
                            case $substr_chrs_c_2 == '\r':&#13;
                                $utf8 .= chr(0x0D);&#13;
                                ++$c;&#13;
                                break;&#13;
&#13;
                            case $substr_chrs_c_2 == '\\"':&#13;
                            case $substr_chrs_c_2 == '\\\'':&#13;
                            case $substr_chrs_c_2 == '\\\\':&#13;
                            case $substr_chrs_c_2 == '\\/':&#13;
                                if (($delim == '"' & $substr_chrs_c_2 != '\\\'') ||
                                   ($delim == "'" && $substr_chrs_c_2 != '\\"')) {
                                    $utf8 .= $chrs{++$c};&#13;
                                }&#13;
                                break;&#13;
&#13;
                            case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs, $c, 6)):&#13;
                                // single, escaped unicode character&#13;
                                $utf16 = chr(hexdec(substr($chrs, ($c + 2), 2)))&#13;
                                       . chr(hexdec(substr($chrs, ($c + 4), 2)));&#13;
                                $utf8 .= $this-&gt;utf162utf8($utf16);&#13;
                                $c += 5;&#13;
                                break;&#13;
&#13;
                            case ($ord_chrs_c &gt;= 0x20) & ($ord_chrs_c <= 0x7F):
                                $utf8 .= $chrs{$c};&#13;
                                break;&#13;
&#13;
                            case ($ord_chrs_c & 0xE0) == 0xC0:
                                // characters U-00000080 - U-000007FF, mask 110XXXXX
                                //see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                                $utf8 .= substr($chrs, $c, 2);&#13;
                                ++$c;&#13;
                                break;&#13;
&#13;
                            case ($ord_chrs_c & 0xF0) == 0xE0:
                                // characters U-00000800 - U-0000FFFF, mask 1110XXXX
                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                                $utf8 .= substr($chrs, $c, 3);&#13;
                                $c += 2;&#13;
                                break;&#13;
&#13;
                            case ($ord_chrs_c & 0xF8) == 0xF0:
                                // characters U-00010000 - U-001FFFFF, mask 11110XXX
                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                                $utf8 .= substr($chrs, $c, 4);&#13;
                                $c += 3;&#13;
                                break;&#13;
&#13;
                            case ($ord_chrs_c & 0xFC) == 0xF8:
                                // characters U-00200000 - U-03FFFFFF, mask 111110XX
                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                                $utf8 .= substr($chrs, $c, 5);&#13;
                                $c += 4;&#13;
                                break;&#13;
&#13;
                            case ($ord_chrs_c & 0xFE) == 0xFC:
                                // characters U-04000000 - U-7FFFFFFF, mask 1111110X
                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                                $utf8 .= substr($chrs, $c, 6);&#13;
                                $c += 5;&#13;
                                break;&#13;
&#13;
                        }&#13;
&#13;
                    }&#13;
&#13;
                    return $utf8;&#13;
&#13;
                } elseif (preg_match('/^\[.*\]$/s', $str) || preg_match('/^\{.*\}$/s', $str)) {&#13;
                    // array, or object notation&#13;
&#13;
                    if ($str{0} == '[') {&#13;
                        $stk = array(SERVICES_JSON_IN_ARR);&#13;
                        $arr = array();&#13;
                    } else {&#13;
                        if ($this-&gt;use & SERVICES_JSON_LOOSE_TYPE) {
                            $stk = array(SERVICES_JSON_IN_OBJ);&#13;
                            $obj = array();&#13;
                        } else {&#13;
                            $stk = array(SERVICES_JSON_IN_OBJ);&#13;
                            $obj = new stdClass();&#13;
                        }&#13;
                    }&#13;
&#13;
                    array_push($stk, array('what'  =&gt; SERVICES_JSON_SLICE,&#13;
                                           'where' =&gt; 0,&#13;
                                           'delim' =&gt; false));&#13;
&#13;
                    $chrs = substr($str, 1, -1);&#13;
                    $chrs = $this-&gt;reduce_string($chrs);&#13;
&#13;
                    if ($chrs == '') {&#13;
                        if (reset($stk) == SERVICES_JSON_IN_ARR) {&#13;
                            return $arr;&#13;
&#13;
                        } else {&#13;
                            return $obj;&#13;
&#13;
                        }&#13;
                    }&#13;
&#13;
                    //print("\nparsing {$chrs}\n");&#13;
&#13;
                    $strlen_chrs = strlen($chrs);&#13;
&#13;
                    for ($c = 0; $c &lt;= $strlen_chrs; ++$c) {&#13;
&#13;
                        $top = end($stk);&#13;
                        $substr_chrs_c_2 = substr($chrs, $c, 2);&#13;
&#13;
                        if (($c == $strlen_chrs) || (($chrs{$c} == ',') & ($top['what'] == SERVICES_JSON_SLICE))) {
                            // found a comma that is not inside a string, array, etc.,
                            // OR we've reached the end of the character list
                            $slice = substr($chrs, $top['where'], ($c - $top['where']));&#13;
                            array_push($stk, array('what' =&gt; SERVICES_JSON_SLICE, 'where' =&gt; ($c + 1), 'delim' =&gt; false));&#13;
                            //print("Found split at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");&#13;
&#13;
                            if (reset($stk) == SERVICES_JSON_IN_ARR) {&#13;
                                // we are in an array, so just push an element onto the stack&#13;
                                array_push($arr, $this-&gt;decode($slice));&#13;
&#13;
                            } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {&#13;
                                // we are in an object, so figure&#13;
                                // out the property name and set an&#13;
                                // element in an associative array,&#13;
                                // for now&#13;
                                $parts = array();&#13;
                               &#13;
                                if (preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {&#13;
                                    // "name":value pair&#13;
                                    $key = $this-&gt;decode($parts[1]);&#13;
                                    $val = $this-&gt;decode($parts[2]);&#13;
&#13;
                                    if ($this-&gt;use & SERVICES_JSON_LOOSE_TYPE) {
                                        $obj[$key] = $val;&#13;
                                    } else {&#13;
                                        $obj-&gt;$key = $val;&#13;
                                    }&#13;
                                } elseif (preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {&#13;
                                    // name:value pair, where name is unquoted&#13;
                                    $key = $parts[1];&#13;
                                    $val = $this-&gt;decode($parts[2]);&#13;
&#13;
                                    if ($this-&gt;use & SERVICES_JSON_LOOSE_TYPE) {
                                        $obj[$key] = $val;&#13;
                                    } else {&#13;
                                        $obj-&gt;$key = $val;&#13;
                                    }&#13;
                                }&#13;
&#13;
                            }&#13;
&#13;
                        } elseif ((($chrs{$c} == '"') || ($chrs{$c} == "'")) & ($top['what'] != SERVICES_JSON_IN_STR)) {
                            // found a quote, and we are not inside a string
                            array_push($stk, array('what' => SERVICES_JSON_IN_STR, 'where' => $c, 'delim' => $chrs{$c}));&#13;
                            //print("Found start of string at {$c}\n");&#13;
&#13;
                        } elseif (($chrs{$c} == $top['delim']) &
                                 ($top['what'] == SERVICES_JSON_IN_STR) &&
                                 (($chrs{$c - 1} != '\\') ||
                                 ($chrs{$c - 1} == '\\' && $chrs{$c - 2} == '\\'))) {
                            // found a quote, we're in a string, and it's not escaped
                            array_pop($stk);&#13;
                            //print("Found end of string at {$c}: ".substr($chrs, $top['where'], (1 + 1 + $c - $top['where']))."\n");&#13;
&#13;
                        } elseif (($chrs{$c} == '[') &
                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {
                            // found a left-bracket, and we are in an array, object, or slice
                            array_push($stk, array('what' => SERVICES_JSON_IN_ARR, 'where' => $c, 'delim' => false));&#13;
                            //print("Found start of array at {$c}\n");&#13;
&#13;
                        } elseif (($chrs{$c} == ']') & ($top['what'] == SERVICES_JSON_IN_ARR)) {
                            // found a right-bracket, and we're in an array
                            array_pop($stk);&#13;
                            //print("Found end of array at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");&#13;
&#13;
                        } elseif (($chrs{$c} == '{') &
                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {
                            // found a left-brace, and we are in an array, object, or slice
                            array_push($stk, array('what' => SERVICES_JSON_IN_OBJ, 'where' => $c, 'delim' => false));&#13;
                            //print("Found start of object at {$c}\n");&#13;
&#13;
                        } elseif (($chrs{$c} == '}') & ($top['what'] == SERVICES_JSON_IN_OBJ)) {
                            // found a right-brace, and we're in an object
                            array_pop($stk);&#13;
                            //print("Found end of object at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");&#13;
&#13;
                        } elseif (($substr_chrs_c_2 == '/*') &
                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {
                            // found a comment start, and we are in an array, object, or slice
                            array_push($stk, array('what' => SERVICES_JSON_IN_CMT, 'where' => $c, 'delim' => false));&#13;
                            $c++;&#13;
                            //print("Found start of comment at {$c}\n");&#13;
&#13;
                        } elseif (($substr_chrs_c_2 == '*/') & ($top['what'] == SERVICES_JSON_IN_CMT)) {
                            // found a comment end, and we're in one now
                            array_pop($stk);&#13;
                            $c++;&#13;
&#13;
                            for ($i = $top['where']; $i &lt;= $c; ++$i)&#13;
                                $chrs = substr_replace($chrs, ' ', $i, 1);&#13;
&#13;
                            //print("Found end of comment at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");&#13;
&#13;
                        }&#13;
&#13;
                    }&#13;
&#13;
                    if (reset($stk) == SERVICES_JSON_IN_ARR) {&#13;
                        return $arr;&#13;
&#13;
                    } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {&#13;
                        return $obj;&#13;
&#13;
                    }&#13;
&#13;
                }&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * @todo Ultimately, this should just call PEAR::isError()&#13;
     */&#13;
    function isError($data, $code = null)&#13;
    {&#13;
        if (class_exists('pear')) {&#13;
            return PEAR::isError($data, $code);&#13;
        } elseif (is_object($data) & (get_class($data) == 'services_json_error' ||
                                 is_subclass_of($data, 'services_json_error'))) {
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
}&#13;
&#13;
if (class_exists('PEAR_Error')) {&#13;
&#13;
    class Services_JSON_Error extends PEAR_Error&#13;
    {&#13;
        function Services_JSON_Error($message = 'unknown error', $code = null,&#13;
                                     $mode = null, $options = null, $userinfo = null)&#13;
        {&#13;
            parent::PEAR_Error($message, $code, $mode, $options, $userinfo);&#13;
        }&#13;
    }&#13;
&#13;
} else {&#13;
&#13;
    /**&#13;
     * @todo Ultimately, this class shall be descended from PEAR_Error&#13;
     */&#13;
    class Services_JSON_Error&#13;
    {&#13;
        function Services_JSON_Error($message = 'unknown error', $code = null,&#13;
                                     $mode = null, $options = null, $userinfo = null)&#13;
        {&#13;
&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
   &#13;
?&gt;&#13;
 &#13;
&#13;
&lt;/code&gt; </description>
      <author>community@ez.no (Bin LIU)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js3</guid>
      <pubDate>Tue, 05 Aug 2008 13:50:46 +0000</pubDate>
    </item>
    <item>
      <title>Re: version with prototype.js</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js2</link>
      <description>Hi !&#13;
&#13;
Thanks for your feedback.&#13;
I have a question though : are the prototype libraries colliding with the YUI ones ? Or did you just want not to load several frameworks ?&#13;
&#13;
Concerning the other TODOed back endhandlers : i thought i'd set up a real, INI based, back end system, loading the right handler automatically. Please do not hesitate to throw some specs around here.&#13;
Even better, become a member of this projects, and let's start off a short and brief specification document, placed somewhere in the SVN.&#13;
&#13;
Let me know, &#13;
-- &#13;
Nicolas Pastorino&#13;
eZ Systems</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js2</guid>
      <pubDate>Mon, 04 Aug 2008 08:14:06 +0000</pubDate>
    </item>
    <item>
      <title>Re: version with prototype.js</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js</link>
      <description>And i saw &#13;
// @TODO : add other reponse type handler :&#13;
//         * XML&#13;
//         * flat file&#13;
&#13;
in the autocompete_ezkeywords.php&#13;
&#13;
I wait the version with the handler flat file, beacause I should only override the template with my prototype.js, but not change the module.php</description>
      <author>community@ez.no (Bin LIU)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js/re_version_with_prototype_js</guid>
      <pubDate>Fri, 01 Aug 2008 14:18:44 +0000</pubDate>
    </item>
    <item>
      <title>version with prototype.js</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js</link>
      <description>Hi, It's useful your extension. Thanks.&#13;
&#13;
But my BO is done with prototype.js&#13;
&#13;
so i did a version with prototype. &#13;
if it's useful for anyone, override the template like this : &#13;
&#13;
design/admin/stylesheets/autocompelete/autocompletion.css&#13;
&lt;code&gt;&#13;
div.autocomplete {&#13;
  position:absolute;&#13;
  width:250px;&#13;
  background-color:white;&#13;
  border:1px solid #888;&#13;
  margin:0px;&#13;
  padding:0px;&#13;
}&#13;
div.autocomplete ul {&#13;
  list-style-type:none;&#13;
  margin:0px;&#13;
  padding:0px;&#13;
}&#13;
div.autocomplete ul li.selected { background-color: #eee;}&#13;
div.autocomplete ul li {&#13;
  list-style-type:none;&#13;
  display:block;&#13;
  margin:0;&#13;
  padding:1px;&#13;
  height:17px;&#13;
  cursor:pointer;&#13;
}&#13;
&lt;/code&gt;&#13;
&#13;
design/admin/templates/content/datatype/edit/ezkeywords.tpl&#13;
&lt;code&gt;&#13;
&lt;!--version prototype by LIU Bin bin.liu@lagardere-active.com --&gt;&#13;
&lt;script src={"javascript/prototype.js"|ezdesign()} type="text/javascript"&gt;&lt;/script&gt;&#13;
&lt;script src={"javascript/scriptaculous.js"|ezdesign()} type="text/javascript"&gt;&lt;/script&gt;&#13;
&lt;link type="text/css" rel="stylesheet" href={'stylesheets/autocomplete/autocompletion.css'|ezdesign}&gt;&#13;
{set-block variable=$input_id}ezcoa-{if ne( $attribute_base, 'ContentObjectAttribute' )}{$attribute_base}-{/if}{$attribute.contentclassattribute_id}_{$attribute.contentclass_attribute_identifier}{/set-block}&#13;
{set-block variable=$container_id}{$attribute_base}_ezkeyword_data_text_{$attribute.id}_AutoComplete{/set-block}&#13;
&lt;div class="yui-skin-ez"&gt;&#13;
{default attribute_base=ContentObjectAttribute}&#13;
	&lt;input id="{$input_id}" class="box ezcc-{$attribute.object.content_class.identifier} ezcca-{$attribute.object.content_class.identifier}_{$attribute.contentclass_attribute_identifier}" type="text" size="70" name="{$attribute_base}_ezkeyword_data_text_{$attribute.id}" value="{$attribute.content.keyword_string|wash(xhtml)}"  /&gt;&#13;
	&lt;span id="indicator1" style="display: none"&gt;&#13;
	  &lt;img src={"ajax-loader.gif"|ezimage} alt="Loading ... " /&gt;&#13;
	&lt;/span&gt;&#13;
	&lt;div id="{$container_id}" class="autocomplete"&gt;&lt;/div&gt;&#13;
{/default}&#13;
&lt;/div&gt;&#13;
{def $max_autocomplete_results = ezini( 'eZKeywordSettings', 'MaxAutocompleteResults', 'datatype.ini',, true() )&#13;
	 $autocomplete_per_content_class = false()}&#13;
&#13;
&#13;
{if eq( ezini( 'eZKeywordSettings', 'AutocompleteKeywordsPerContentClass', 'datatype.ini',, true() ), 'enabled' )}&#13;
	{set $autocomplete_per_content_class = true()}&#13;
	{def $content_class_id = $attribute.object.contentclass_id}&#13;
{else}&#13;
	{set $autocomplete_per_content_class = false()}&#13;
{/if}	&#13;
{set-block variable=$ajax_back_end_url}{'/ajaxbackend/autocomplete_ezkeywords_prototype/'|ezurl( 'no', 'relative' )}{if $autocomplete_per_content_class}/(class_id)/{$content_class_id}{/if}{/set-block}&#13;
&#13;
&lt;script type="text/javascript"&gt;&#13;
	new Ajax.Autocompleter('{$input_id}','{$container_id}','{$ajax_back_end_url}', {ldelim} paramName : 'keyword', minChars: 2 ,indicator: 'indicator1', afterUpdateElement : getSelectionId, tokens: ','{rdelim} );&#13;
	&#13;
	{literal}&#13;
	function getSelectionId(text, li) {&#13;
		var keywords=text.value.split(",");&#13;
		var new_keywords = new Array();&#13;
		var new_keyword = li.innerHTML.strip();&#13;
		var counter = 0;&#13;
		var keyword = "";&#13;
		var n=0;&#13;
		for (var i=0; i&lt;keywords.length; i++) &#13;
		{&#13;
		 	keyword = keywords[i].strip();&#13;
		 	if( new_keyword == keyword)&#13;
		 	{&#13;
		 		counter++;&#13;
		 		if( counter &lt; 2 )&#13;
		 		{&#13;
		 			new_keywords[n] = keyword;&#13;
		 			n++;&#13;
		 		}&#13;
		 	}&#13;
		 	else&#13;
		 	{&#13;
		 		new_keywords[n] = keyword;&#13;
		 		n++;&#13;
		 	}&#13;
		}&#13;
		//new Effect.Shake({/literal}$('{$input_id}'){/literal}, {distance:2});&#13;
		if(counter &gt; 1)&#13;
		new Effect.Highlight({/literal}$('{$input_id}'){/literal}, { startcolor: '#fe5500',endcolor: '#ffffff' });&#13;
		{/literal}$('{$input_id}'){/literal}.value = new_keywords.join(',');&#13;
	}&#13;
	{/literal}&#13;
&lt;/script&gt;&#13;
&lt;/code&gt;&#13;
&#13;
modules/ajaxbackend/module.php&#13;
&lt;code&gt;&#13;
//add this&#13;
$ViewList["autocomplete_ezkeywords_prototype"] = array(&#13;
    "script" =&gt; "autocomplete_ezkeywords_prototype.php",&#13;
    'functions' =&gt; array( 'autocomplete_ezkeywords' ),&#13;
    'unordered_params' =&gt; array( 'class_id' =&gt; 'ClassID' )&#13;
    );&#13;
&lt;/code&gt;&#13;
&#13;
modules/ajaxbackend/autocomplete_ezkeywords_prototype.php&#13;
&lt;code&gt;&#13;
&lt;?php&#13;
$http = eZHTTPTool::instance();&#13;
&#13;
$classID = ( is_numeric( $Params['ClassID'] ) ) ? trim( $Params['ClassID'] ) : false ;&#13;
&#13;
$datatypeIni = eZINI::instance( 'datatype.ini' );&#13;
$maxAutocompleteResults = $datatypeIni-&gt;hasVariable( 'eZKeywordSettings', 'MaxAutocompleteResults' ) ? $datatypeIni-&gt;variable( 'eZKeywordSettings', 'MaxAutocompleteResults' ) : 20 ;&#13;
if ( $http-&gt;hasPostVariable( "keyword" ) )&#13;
{&#13;
     $autocompleteString = $http-&gt;postVariable( "keyword" );&#13;
}&#13;
else&#13;
{&#13;
	eZExecution::cleanExit();&#13;
}&#13;
// @TODO : implement some cache system in order to alleviate the fetch overload in case of large keyword databases&#13;
$db = eZDB::instance();&#13;
$query = "SELECT DISTINCT( ezkeyword.keyword ) FROM ezkeyword WHERE keyword LIKE '" . $db-&gt;escapeString( $autocompleteString ) . '%' . "' ";&#13;
&#13;
if ( $classID )&#13;
{&#13;
    $query .= ' AND class_id=' . $classID . ' ';&#13;
}&#13;
&#13;
$query .= "LIMIT $maxAutocompleteResults";&#13;
$wordArray = $db-&gt;arrayQuery( $query );&#13;
&#13;
// build the response array&#13;
$reponseArray = array();&#13;
echo "&lt;ul&gt;";&#13;
foreach ( $wordArray as $resultItem )&#13;
{&#13;
    echo "&lt;li&gt;".$resultItem['keyword']."&lt;/li&gt;";&#13;
}&#13;
echo "&lt;/ul&gt;";&#13;
eZExecution::cleanExit();&#13;
&#13;
?&gt;&lt;/code&gt;&#13;
&#13;
it's ok for the person use prototype.js&#13;
</description>
      <author>community@ez.no (Bin LIU)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/version_with_prototype_js</guid>
      <pubDate>Fri, 01 Aug 2008 14:14:07 +0000</pubDate>
    </item>
    <item>
      <title>Re: simple and useful</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/simple_and_useful/re_simple_and_useful</link>
      <description>Hi Damien, &#13;
&#13;
Thanks for your valuable feedback. I'll give a sign as soon as modifications are integrated in the trunk&#13;
&#13;
Best regards, &#13;
-- &#13;
Nicolas Pastorino&#13;
eZ Systems</description>
      <author>community@ez.no (Nicolas Pastorino)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/simple_and_useful/re_simple_and_useful</guid>
      <pubDate>Mon, 07 Jul 2008 11:02:00 +0000</pubDate>
    </item>
    <item>
      <title>simple and useful</title>
      <link>http://projects.ez.no/ezkeyword_autocomplete/forum/general/simple_and_useful</link>
      <description>Hi Nicolas,&#13;
&#13;
Bravo !&#13;
It's very simple but very useful extension. I was looking for something like that when I see this one in my RSS Reader :-)&#13;
&#13;
Two remarks/bugs :&#13;
- if you call directly http://yoursite/ajaxbackend/autocomplete_ezkeywords without parameter it lists the first 100 keywords... In this case a blank page should be a better response I think.&#13;
- useShadows, anomHoriz, minQueryLength parameters of the YAHOO.widget.AutoComplete should be set through settings (I don't like shadows and stuff like that...)&#13;
&#13;
Cheers !</description>
      <author>community@ez.no (Damien Pobel)</author>
      <guid>http://projects.ez.no/ezkeyword_autocomplete/forum/general/simple_and_useful</guid>
      <pubDate>Fri, 04 Jul 2008 20:15:04 +0000</pubDate>
    </item>
  </channel>
</rss>