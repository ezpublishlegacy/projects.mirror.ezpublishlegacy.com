<?php
//
// Definition of eZTemplateToolbarFunction class
//
// Created on: <04-Mar-2004 13:22:32 wy>
// Modified on: <15-Aug-2004 17:16:16 vl>
//
// Copyright (C) 1999-2004 eZ systems as. All rights reserved.
//
// This source file is part of the eZ publish (tm) Open Source Content
// Management System.
//
// This file may be distributed and/or modified under the terms of the
// "GNU General Public License" version 2 as published by the Free
// Software Foundation and appearing in the file LICENSE included in
// the packaging of this file.
//
// Licencees holding a valid "eZ publish professional licence" version 2
// may use this file in accordance with the "eZ publish professional licence"
// version 2 Agreement provided with the Software.
//
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING
// THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE.
//
// The "eZ publish professional licence" version 2 is available at
// http://ez.no/ez_publish/licences/professional/ and in the file
// PROFESSIONAL_LICENCE included in the packaging of this file.
// For pricing of this licence please contact us via e-mail to licence@ez.no.
// Further contact information is available at http://ez.no/company/contact/.
//
// The "GNU General Public License" (GPL) is available at
// http://www.gnu.org/copyleft/gpl.html.
//
// Contact licence@ez.no if any conditions of this licencing isn't clear to
// you.
//

/*! \file eztemplatetoolbarfunction.php
*/

/*!
  \class eZTemplateToolbarFunction eztemplatetoolbarfunction.php
  \brief Modified standard toolbar template function ( Code cleansing & complete removal of autogenerated html-text elements)
*/

class eZTemplateToolbarFunction
{

    /*!
     Initializes the object with names.
    */
    function eZTemplateToolbarFunction( $blockName = 'tool_bar' )
    {
        $this->BlockName = $blockName;
    }

    /*!
     Returns an array containing the name of the block function, default is "block".
     The name is specified in the constructor.
    */
    function functionList()
    {
        return array( $this->BlockName );
    }

    function functionTemplateHints()
    {
        return array( $this->BlockName => array( 'parameters' => true,
                                                 'static' => false,
                                                 'transform-children' => false,
                                                 'tree-transformation' => true,
                                                 'transform-parameters' => true ) );
    }

    function templateNodeTransformation( $functionName, &$node, &$tpl, $parameters, $privateData )
    {
        if ( $functionName != $this->BlockName )
            return false;

        $parameters = eZTemplateNodeTool::extractFunctionNodeParameters( $node );

        if ( !( isset( $parameters['name'] ) && eZTemplateNodeTool::isStaticElement( $parameters['name'] ) ) )
		{
			eZDebug::writeError( 'Missing name parameter in ',
								 "eZTemplateToolbarFunction:'$functionName'" );
            return false;
		}
		if ( !( isset( $parameters['view'] ) && eZTemplateNodeTool::isStaticElement( $parameters['view'] ) ) )
        {
			eZDebug::writeError( 'Missing view mode parameter in ',
								 "eZTemplateToolbarFunction:'$functionName'" );
            return false;
        }

		// Read toolbar ini settings
        $toolbarIni =& eZINI::instance( 'toolbar.ini' );
		$toolbarPosition = eZTemplateNodeTool::elementStaticValue( $parameters['name'] );
        $toolbarName = implode( '', array( 'Toolbar_', $toolbarPosition ) );
        $toolArray = $toolbarIni->variable( $toolbarName, 'Tool' );
		$viewMode = eZTemplateNodeTool::elementStaticValue( $parameters['view'] );
		$viewModeTemplateResourcesDir = implode( '', array( 'design:toolbar/', $viewMode, '/' ) );

		// toolbars do not generate proprietary namespaces for template variables
		$namespaceValue = false;

		$newNodes = array();
		$toolbarTemplateVariableShortList = array();

		if ( is_array( $toolArray ) && count( $toolArray ) > 0 )
		{
			// forward optional toolbar-function parameters to template vars
			foreach ( array_keys( $parameters ) as $parameterName )
            {
            	if ( $parameterName == 'name' || $parameterName == 'view' )
            		continue;
               	$parameterData =& $parameters[$parameterName];
                $newNodes[] = eZTemplateNodeTool::createVariableNode( false, $parameterData, false, array(),
                                                                      array( $namespaceValue, EZ_TEMPLATE_NAMESPACE_SCOPE_RELATIVE, $parameterName ) );
                $toolbarTemplateVariableShortList[] = $parameterName;
             }
		}
		else
		{
			// no tools in toolbar -> return without error
			return $newNodes;
		}

		// set tpl-variable nodes for individual tools in toolbar
		foreach ( array_keys( $toolArray ) as $toolKey )
        {
			$toolTemplateVariableShortList = array();
        	$tool = $toolArray[$toolKey];
			$placement = $toolKey + 1;
			$toolTemplateResourceURI = implode( '', array( $viewModeTemplateResourcesDir, $tool, '.tpl' ) );
			$resourceName = '';
			$templateName = '';
			$resource =& $tpl->resourceFor( $toolTemplateResourceURI, $resourceName, $templateName );
            $resourceData =& $tpl->resourceData( $resource, $toolTemplateResourceURI, $resourceName, $templateName );
			$includeNodes = $resource->templateNodeTransformation( $functionName, $node, $tpl, $resourceData, $parameters, $namespaceValue );

			if ( $includeNodes === false )
			{
				eZDebug::writeError( 'Could not read include-template variable nodes',
								 	 "eZTemplateToolbarFunction::'$functionName'" );
            	return false;
			}

			// now we feed our tool-template resource with the required parameters from toolbar.ini
			$toolIniParams = array();

			$toolIniParamsDefaultGroupName = implode( '', array( 'Tool_', $tool ) );
            if ( $toolbarIni->hasGroup( $toolIniParamsDefaultGroupName ) )
            	$toolIniParams = $toolbarIni->group( $toolIniParamsDefaultGroupName );

			$toolID = implode( '', array( 'Tool_', $toolbarPosition, '_', $tool, '_', $placement ) );
            if ( $toolbarIni->hasGroup( $toolID ) )
      			$toolIniParams = array_merge( $toolIniParams, $toolbarIni->group( $toolID ) );

            foreach ( array_keys( $toolIniParams ) as $key )
            {
            	$toolTemplateVariableShortList[] = $key;
				$newNodes[] = eZTemplateNodeTool::createVariableNode( false, $toolIniParams[$key], false, array(),
                                                                          	  array( $namespaceValue, EZ_TEMPLATE_NAMESPACE_SCOPE_RELATIVE, $key ) );
            }

            // Add template-variables tool_id and tool_offset
			$toolTemplateVariableShortList[] = 'tool_id';
			$newNodes[] = eZTemplateNodeTool::createVariableNode( false, $toolID, false, array(),
                                                                      	  array( $namespaceValue, EZ_TEMPLATE_NAMESPACE_SCOPE_RELATIVE, 'tool_id' ) );
            $toolTemplateVariableShortList[] = 'tool_offset';
            $newNodes[] = eZTemplateNodeTool::createVariableNode( false, $placement, false, array(),
                                                                      	  array( $namespaceValue, EZ_TEMPLATE_NAMESPACE_SCOPE_RELATIVE, 'tool_offset' ) );

			// merge tool template variables with the new ones set here & finally create unset-nodes
            $newNodes = array_merge( $newNodes, $includeNodes );

			foreach ( $toolTemplateVariableShortList as $variableName )
            {
            	$newNodes[] = eZTemplateNodeTool::createVariableUnsetNode( array( $namespaceValue, EZ_TEMPLATE_NAMESPACE_SCOPE_RELATIVE, $variableName ) );
            }
			unset( $toolTemplateVariableShortList );
        }

		foreach ( $toolbarTemplateVariableShortList as $variableName )
        {
        	$newNodes[] = eZTemplateNodeTool::createVariableUnsetNode( array( $namespaceValue, EZ_TEMPLATE_NAMESPACE_SCOPE_RELATIVE, $variableName ) );
        }
		unset( $toolbarTemplateVariableShortList );

        return $newNodes;
    }

    /*!
     Processes the function with all it's children.
    */
    function process( &$tpl, &$textElements, $functionName, $functionChildren, $functionParameters, $functionPlacement, $rootNamespace, $currentNamespace )
    {
        switch ( $functionName )
        {
            case $this->BlockName:
            {
				if ( !isset( $functionParameters['name'] ) )
				{
					$tpl->warning( $functionName, 'Missing toolbar name-parameter. Cannot resolve toolbar object.' );
            		return;
				}
                if ( !isset( $functionParameters['view'] ) )
				{
					$tpl->warning( $functionName, 'Missing toolbar view-parameter. Cannot resolve toolbar templates.' );
            		return;
				}

                // Read toolbar ini settings
                $toolbarIni =& eZINI::instance( 'toolbar.ini' );
				$toolbarPosition = $tpl->elementValue( $functionParameters['name'], $rootNamespace, $currentNamespace, $functionPlacement );
       			$toolbarName = implode( '', array( 'Toolbar_', $toolbarPosition ) );
                $toolArray = $toolbarIni->variable( $toolbarName, 'Tool' );
				$viewMode = $tpl->elementValue( $functionParameters['view'], $rootNamespace, $currentNamespace, $functionPlacement );
				$viewModeTemplateResourcesDir = implode( '', array( 'design:toolbar/', $viewMode, '/' ) );

				$toolbarTemplateVariableShortList = array();

				if ( is_array( $toolArray ) && count( $toolArray ) > 0 )
				{
					// forward optional toolbar-function parameters to template vars
					foreach ( array_keys( $functionParameters ) as $parameterName )
            		{
            			if ( $parameterName == 'name' || $parameterName == 'view' )
            				continue;
               			$parameterData = $functionParameters[$parameterName];
						$parameterElementValue = $tpl->elementValue( $parameterData, $rootNamespace, $currentNamespace, $functionPlacement );
						$tpl->setVariable( $parameterName, $parameterElementValue, $currentNamespace );
                		$toolbarTemplateVariableShortList[] = $parameterName;
             		}
				}
				else
				{
					// no tools in toolbar -> return without error
					return;
				}

				// set tpl-variable nodes for individual tools in toolbar
				$extraParameters = array();

				foreach ( array_keys( $toolArray ) as $toolKey )
        		{
					$toolTemplateVariableShortList = array();
        			$tool = $toolArray[$toolKey];
					$placement = $toolKey + 1;
					$toolTemplateResourceURI = implode( '', array( $viewModeTemplateResourcesDir, $tool, '.tpl' ) );

					// now we feed our tool-template resource with the required parameters from toolbar.ini
					$toolIniParams = array();

					$toolIniParamsDefaultGroupName = implode( '', array( 'Tool_', $tool ) );
            		if ( $toolbarIni->hasGroup( $toolIniParamsDefaultGroupName ) )
            			$toolIniParams = $toolbarIni->group( $toolIniParamsDefaultGroupName );

					$toolID = implode( '', array( 'Tool_', $toolbarPosition, '_', $tool, '_', $placement ) );
            		if ( $toolbarIni->hasGroup( $toolID ) )
      					$toolIniParams = array_merge( $toolIniParams, $toolbarIni->group( $toolID ) );

            		foreach ( array_keys( $toolIniParams ) as $key )
            		{
            			$toolTemplateVariableShortList[] = $key;
						$tpl->setVariable( $key, $toolIniParams[$key], $currentNamespace );
            		}

            		// Add template-variables tool_id and tool_offset
					$toolTemplateVariableShortList[] = 'tool_id';
					$tpl->setVariable( 'tool_id', $toolID, $currentNamespace );
                    $toolTemplateVariableShortList[] = 'tool_offset';
					$tpl->setVariable( 'tool_offset', $placement, $currentNamespace );

					// process the tool template & unset tool template vars
					$toolTemplateResourceURI = implode( '', array( $viewModeTemplateResourcesDir, $tool, '.tpl' ) );
					$tpl->processURI( $toolTemplateResourceURI, true, $extraParameters, $textElements, $rootNamespace, $currentNamespace );
					foreach ( $toolTemplateVariableShortList as $variableName )
            		{
						$tpl->unsetVariable( $variableName, $currentNamespace );
            		}
					unset( $toolTemplateVariableShortList );
        		}

				foreach ( $toolbarTemplateVariableShortList as $variableName )
        		{
						$tpl->unsetVariable( $variableName, $currentNamespace );
        		}
				unset( $toolbarTemplateVariableShortList );
			}

			default:
			{
			}
        }
    }

    /*!
     Returns false.
    */
    function hasChildren()
    {
        return false;
    }
}

?>
