<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eZ Projects / data_import / Forum / Example Source Handler</title>
    <link>http://projects.ez.no/</link>
    <description></description>
    <language>en-GB</language>
    <managingEditor>community@ez.no (Administrator User)</managingEditor>
    <pubDate>Sun, 05 Feb 2017 13:24:00 +0000</pubDate>
    <lastBuildDate>Sun, 05 Feb 2017 13:24:00 +0000</lastBuildDate>
    <generator>eZ Components Feed dev (http://ezcomponents.org/docs/tutorials/Feed)</generator>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <atom:link href="http://projects.ez.no/rss/feed/11200" rel="self" type="application/rss+xml"/>
    <item>
      <title>Example Source Handler</title>
      <link>http://projects.ez.no/data_import/forum/example_source_handler/example_source_handler</link>
      <description>Custom Source Handler to deal with multiple eZ content-objects that have been exported into a single XML source file.&#13;
&#13;
&lt;b&gt;Note 1:&lt;/b&gt; This requires a small modification to ImportOperator.php (below) so that you can pass the name of the file to the command line command:&#13;
&#13;
&lt;code&gt;&#13;
#php extension/data_import/scripts/run.php -s &lt;siteaccess&gt; -i ImportOperator -d MyCustomSourceXMLHandler -f &lt;name-of-source-XML-file-without.xml-suffix&gt;&#13;
&lt;/code&gt;&#13;
&#13;
&lt;b&gt;Note 2:&lt;/b&gt; This also assumes that your source XML is in the same format as those exports found in the data_import 'examples' folder (or has been transformed using XSL into this format from another XML format, say from the ezxmlexport extension)&#13;
&#13;
&lt;b&gt;Note 3:&lt;/b&gt; This only works for 'folder' and 'article' content-classes and doesn't seem to want to import inline images, but I'm working on it.&#13;
&#13;
&lt;b&gt;Note 4:&lt;/b&gt; You will of course need to add this class to the ezp_extension.php array in order to eZ to recognise your new class.&#13;
&#13;
&lt;b&gt;ImportOperator.php Modification&lt;/b&gt;&#13;
&#13;
&lt;code&gt;&#13;
To come...&#13;
&lt;/code&gt;&#13;
&#13;
&lt;b&gt;Custom Source Handler&lt;/b&gt;&#13;
&#13;
&lt;code&gt;&#13;
&lt;?php&#13;
/*&#13;
*	@decription:	Generic exported eZ content-class import class. Relies on the&#13;
'n' export method from ezxmlexport.&#13;
* Heavily modified version of the example script: XMLFolders.php&#13;
* 	@author:		R.Michell April 2010&#13;
*	@package: 		data_import&#13;
*/&#13;
&#13;
class MyCustomSourceXMLHandler extends XmlHandlerPHP&#13;
{&#13;
	var $handlerTitle = 'Generic Handler';										// Default handler name.&#13;
	var $logfile = 'data_import.log';											// Log file-name.		&#13;
	const REMOTE_IDENTIFIER = 'xmlimport_';										// Default. Is appended-to later..&#13;
	var $root_node = 'all';														// Source XML root node element.&#13;
	var $xml_source_path = 'extension/data_import/dataSource/exports';			// Path to parent dir od source XML file(s) for import.&#13;
	var $xml_source_file;														// ezxmlexport uses an export name for the export's parent dir and XML filename.&#13;
	var $parent_id_fallback = 2;												// Fallback to root node ('Main') if a parent_id cannot be found for an imported object&#13;
&#13;
	/* &#13;
	* Constructor&#13;
	*/&#13;
	public function MyCustomSourceXMLHandler()&#13;
	{&#13;
		$message = 'Starting data_import process';&#13;
		$logfile = $this-&gt;logfile;&#13;
		$this-&gt;writeLog($message,$logfile);&#13;
	}&#13;
&#13;
	/*&#13;
	* @desc 		Log stuff to ezpublish log using ezcomponents&#13;
	* @return		void&#13;
	* @args			string $message, string $logfile&#13;
	* @author		Russell Michell April 2010&#13;
	* @ToDo			Relies on presence of ezcomponents - run a check for its existence.&#13;
	*				Find native eZ function to get ezpublish intall path and pass to $writer var&#13;
	*/&#13;
	private function logger($message,$logfile)&#13;
	{&#13;
		// Get the one and only instance of the ezcLog.&#13;
		$log = ezcLog::getInstance();&#13;
&#13;
		// Get an instance to the default log mapper.&#13;
		$mapper = $log-&gt;getMapper();&#13;
&#13;
		// Create a new Unix file writer, that writes to the file: "default.log".&#13;
		$writer = new ezcLogUnixFileWriter('/var/www/htdocs/ez-GeoNet/var/log/',$logfile);&#13;
&#13;
		// Create a filter that accepts every message (default behavior).&#13;
		$filter = new ezcLogFilter;&#13;
&#13;
		// Combine the filter with the writer in a filter rule.&#13;
		$rule = new ezcLogFilterRule( $filter, $writer, true );&#13;
&#13;
		// And finally assign the rule to the mapper.&#13;
		$mapper-&gt;appendRule( $rule );&#13;
&#13;
		// Write a message to the log.&#13;
		$log-&gt;log($message,ezcLog::WARNING); &#13;
	}&#13;
&#13;
	private function writeLog( $message, $newlogfile = '')&#13;
	{&#13;
		if($newlogfile)&#13;
		{&#13;
			$logfile = $newlogfile;&#13;
		}&#13;
		else&#13;
		{&#13;
			$logfile = $this-&gt;logfile;&#13;
		}&#13;
		$this-&gt;logger($message,$logfile);&#13;
	}&#13;
	&#13;
	// Mapping for source XML field name to an eZ attribute name:&#13;
	function geteZAttributeIdentifierFromField()&#13;
	{&#13;
		$field_name = $this-&gt;current_field-&gt;getAttribute('name');&#13;
		if($this-&gt;getTargetContentClass() == 'folder')&#13;
		{&#13;
			switch ($field_name)&#13;
			{&#13;
				case 'shortname':&#13;
					return 'short_name';&#13;
				break;&#13;
				case 'showsubitems':&#13;
					return 'show_children';&#13;
				break;&#13;
				case 'publishdate':&#13;
					return 'publish_date';&#13;
				break;&#13;
				case 'shortdescription':&#13;
					return 'short_description';&#13;
				break;&#13;
				default:&#13;
					return $field_name;&#13;
				break;&#13;
			}&#13;
		}&#13;
		if($this-&gt;getTargetContentClass() == 'article')&#13;
		{&#13;
			switch ($field_name)&#13;
			{&#13;
				case 'name':&#13;
					return 'title';&#13;
				break;&#13;
				case 'shortname':&#13;
					return 'short_title';&#13;
				break;&#13;
				case 'description':&#13;
					return 'body';&#13;
				break;&#13;
				case 'publishdate':&#13;
					return 'publish_date';&#13;
				break;&#13;
				case 'shortdescription':&#13;
					return 'intro';&#13;
				break;&#13;
				default:&#13;
					return $field_name;&#13;
				break;&#13;
			}&#13;
		}&#13;
		else&#13;
		{&#13;
			switch ($field_name)&#13;
			{&#13;
				case 'shortname':&#13;
					return 'short_name';&#13;
				break;&#13;
				case 'showsubitems':&#13;
					return 'show_children';&#13;
				break;&#13;
				case 'publishdate':&#13;
					return 'publish_date';&#13;
				break;&#13;
				default:&#13;
					return $field_name;&#13;
				break;&#13;
			}&#13;
		}&#13;
	}&#13;
&#13;
	/*&#13;
	* Handles 'stringy' fields (Text,XML etc) before storing them in ez publish&#13;
	*/&#13;
	function getValueFromField()&#13;
	{&#13;
		switch( $this-&gt;current_field-&gt;getAttribute('name') )&#13;
		{&#13;
			case 'publishdate':&#13;
			{&#13;
				$return_unix_ts = time();&#13;
				$us_formated_date = $this-&gt;current_field-&gt;nodeValue;&#13;
				$parts = explode('/', $us_formated_date );&#13;
				if( count( $parts ) == 3)&#13;
				{&#13;
					$return_unix_ts = mktime( 0,0,0, $parts[0], $parts[1] , $parts[2] );&#13;
				}&#13;
				return $return_unix_ts;&#13;
			}&#13;
			break;&#13;
			case 'shortdescription':&#13;
			case 'description':&#13;
			{&#13;
				$xml_text_parser = new XmlTextParser();&#13;
				// Having probs with the in-page anchors: &lt;a name="eztoc27594_0_1" id="eztoc27594_0_1"&gt;&lt;/a&gt; - they don't get imported. Parse them out:&#13;
				if(preg_match("#&lt;a name=\"eztoc.*\" id=\"eztoc.*\"&gt;&lt;/a&gt;#e",$this-&gt;current_field-&gt;nodeValue))&#13;
				{&#13;
					$this-&gt;current_field-&gt;nodeValue = preg_replace("#&lt;a name=\"eztoc.*\" id=\"eztoc.*\"&gt;&lt;/a&gt;#",'',$this-&gt;current_field-&gt;nodeValue);&#13;
				}&#13;
				$xmltext = $xml_text_parser-&gt;Html2XmlText( $this-&gt;current_field-&gt;nodeValue );&#13;
                                echo $xmltext;&#13;
				if($xmltext !== false)&#13;
				{&#13;
					return $xmltext;&#13;
				}&#13;
				else&#13;
				{&#13;
					$message = 'Failed to parse XML for attribute: '.$this-&gt;current_field-&gt;getAttribute('name');&#13;
					$this-&gt;writeLog(self::REMOTE_IDENTIFIER.$this-&gt;current_row-&gt;getAttribute('id').': '.$message,$logfile);&#13;
					return false;&#13;
				}&#13;
			}&#13;
			break;&#13;
			default:&#13;
			{&#13;
				return $this-&gt;current_field-&gt;nodeValue;&#13;
			}&#13;
			break;&#13;
		}&#13;
	}&#13;
&#13;
	/*&#13;
	* @desc		Logic where to place the current content node into the content tree&#13;
	*&#13;
	*/&#13;
	function getParentNodeId()&#13;
	{&#13;
		$parent_id = $this-&gt;parent_id_fallback;&#13;
&#13;
		// Conventional method taken right out of XMLFolders.php example&#13;
		if($this-&gt;current_row-&gt;getAttribute('parent_id'))&#13;
		{&#13;
			$parent_remote_id = $this-&gt;current_row-&gt;getAttribute('parent_id');&#13;
			$eZ_object = eZContentObject::fetchByRemoteID( self::REMOTE_IDENTIFIER.$parent_remote_id );&#13;
			if($eZ_object)&#13;
			{&#13;
				$parent_id = $eZ_object-&gt;attribute('main_node_id');&#13;
			}&#13;
			else&#13;
			{&#13;
				// If a parent_id can't be found using self::REMOTE_IDENTIFIER.$parent_remote_id as the key, lose the REMOTE_IDENTIFIER and try that with eZContentObject::fetch()&#13;
				$eZ_object = eZContentObject::fetch( $parent_remote_id );&#13;
				if($eZ_object)&#13;
				{&#13;
					$parent_id = $eZ_object-&gt;attribute('main_node_id');&#13;
				}&#13;
			}&#13;
		}&#13;
		return $parent_id;&#13;
	}&#13;
&#13;
	function getDataRowId()&#13;
	{&#13;
		return self::REMOTE_IDENTIFIER.$this-&gt;current_row-&gt;getAttribute('id');&#13;
	}&#13;
&#13;
	/*&#13;
	* - Allow the flexibility to extract data from multiple content-classes a single source XML file from ezxmlexport:&#13;
	* - See comments by Joachim Karl at: http://ez.no/developer/contribs/import_export/data_import&#13;
	*/				&#13;
	function getTargetContentClass()&#13;
	{	&#13;
		if($this-&gt;current_row-&gt;getAttribute('type'))&#13;
		{&#13;
			return $this-&gt;current_row-&gt;getAttribute('type');&#13;
		}&#13;
		else&#13;
		{&#13;
			$message = 'eZ content-class not found. Given class name was: '.$this-&gt;current_row-&gt;getAttribute('type');&#13;
			$this-&gt;writeLog(self::REMOTE_IDENTIFIER.$this-&gt;current_row-&gt;getAttribute('id').': '.$message,$logfile);&#13;
			return false;&#13;
		}&#13;
	}	&#13;
&#13;
	function readData()&#13;
	{&#13;
		$filename = $this-&gt;xml_source_path.'/'.$this-&gt;xml_source_file.'/'.$this-&gt;xml_source_file.'.transformed.xml';&#13;
		if(isset($this-&gt;xml_source_path) & isset($this->xml_source_file))
		{
			$filename = $this->xml_source_path.'/'.$this->xml_source_file.'/'.$this->xml_source_file.'.transformed.xml';&#13;
			if(!is_file($filename))&#13;
			{&#13;
				$message = 'Cannot open '.$filename.' for reading. Please check files/dirs exist and permissions are set correctly'."\n";&#13;
				$this-&gt;writeLog(self::REMOTE_IDENTIFIER.$this-&gt;current_row-&gt;getAttribute('id').': '.$message,$logfile);&#13;
				return false;&#13;
			}&#13;
			else&#13;
			{&#13;
				return $this-&gt;parse_xml_document($filename,$this-&gt;root_node);&#13;
			}&#13;
		}&#13;
		else&#13;
		{&#13;
				$message = 'Source export file cannot be found or is not set. Please check files/dirs exist and permissions are set correctly'."\n";&#13;
				$this-&gt;writeLog(self::REMOTE_IDENTIFIER.$this-&gt;current_row-&gt;getAttribute('id').': '.$message,$logfile);&#13;
				return false;&#13;
		}&#13;
	}&#13;
&#13;
	function post_publish_handling( $eZ_object, $force_exit )&#13;
	{&#13;
		$force_exit = false;&#13;
		return true;&#13;
	}&#13;
}&#13;
?&gt;&#13;
&lt;/code&gt;&#13;
&#13;
</description>
      <author>community@ez.no (Russell Michell)</author>
      <guid>http://projects.ez.no/data_import/forum/example_source_handler/example_source_handler</guid>
      <pubDate>Thu, 29 Apr 2010 04:03:53 +0000</pubDate>
    </item>
  </channel>
</rss>